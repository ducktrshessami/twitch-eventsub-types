{"version":3,"sources":["../src/enums.ts","../src/error.ts","../src/api.ts","../src/util.ts"],"sourcesContent":["export enum RequestHeaders {\n    MessageId = \"twitch-eventsub-message-id\",\n    MessageRetry = \"twitch-eventsub-message-retry\",\n    MessageType = \"twitch-eventsub-message-type\",\n    MessageSignature = \"twitch-eventsub-message-signature\",\n    MessageTimestamp = \"twitch-eventsub-message-timestamp\",\n    SubscriptionType = \"twitch-eventsub-subscription-type\",\n    SubscriptionVersion = \"twitch-eventsub-subscription-version\"\n}\n\nexport enum NotificationType {\n    Notification = \"notification\",\n    WebhookCallbackVerification = \"webhook_callback_verification\",\n    Revocation = \"revocation\"\n}\n\nexport enum SubscriptionType {\n    ChannelUpdate = \"channel.update\",\n    ChannelFollow = \"channel.follow\",\n    ChannelSubscribe = \"channel.subscribe\",\n    ChannelSubscriptionEnd = \"channel.subscription.end\",\n    ChannelSubscriptionGift = \"channel.subscription.gift\",\n    ChannelSubscriptionMessage = \"channel.subscription.message\",\n    ChannelCheer = \"channel.cheer\",\n    ChannelRaid = \"channel.raid\",\n    ChannelBan = \"channel.ban\",\n    ChannelUnban = \"channel.unban\",\n    ChannelModeratorAdd = \"channel.moderator.add\",\n    ChannelModeratorRemove = \"channel.moderator.remove\",\n    ChannelPointsCustomRewardAdd = \"channel.channel_points_custom_reward.add\",\n    ChannelPointsCustomRewardUpdate = \"channel.channel_points_custom_reward.update\",\n    ChannelPointsCustomRewardRemove = \"channel.channel_points_custom_reward.remove\",\n    ChannelPointsCustomRewardRedemptionAdd = \"channel.channel_points_custom_reward_redemption.add\",\n    ChannelPointsCustomRewardRedemptionUpdate = \"channel.channel_points_custom_reward_redemption.update\",\n    ChannelPollBegin = \"channel.poll.begin\",\n    ChannelPollProgress = \"channel.poll.progress\",\n    ChannelPollEnd = \"channel.poll.end\",\n    ChannelPredictionBegin = \"channel.prediction.begin\",\n    ChannelPredictionProgress = \"channel.prediction.progress\",\n    ChannelPredictionLock = \"channel.prediction.lock\",\n    ChannelPredictionEnd = \"channel.prediction.end\",\n    CharityDonation = \"channel.charity_campaign.donate\",\n    CharityCampaignStart = \"channel.charity_campaign.start\",\n    CharityCampaignProgress = \"channel.charity_campaign.progress\",\n    CharityCampaignStop = \"channel.charity_campaign.stop\",\n    DropEntitlementGrant = \"drop.entitlement.grant\",\n    ExtensionBitsTransactionCreate = \"extension.bits_transaction.create\",\n    GoalBegin = \"channel.goal.begin\",\n    GoalProgress = \"channel.goal.progress\",\n    GoalEnd = \"channel.goal.end\",\n    HypeTrainBegin = \"channel.hype_train.begin\",\n    HypeTrainProgress = \"channel.hype_train.progress\",\n    HypeTrainEnd = \"channel.hype_train.end\",\n    ShieldModeBegin = \"channel.shield_mode.begin\",\n    ShieldModeEnd = \"channel.shield_mode.end\",\n    ShoutoutCreate = \"channel.shoutout.create\",\n    ShoutoutReceived = \"channel.shoutout.receive\",\n    StreamOnline = \"stream.online\",\n    StreamOffline = \"stream.offline\",\n    UserAuthorizationGrant = \"user.authorization.grant\",\n    UserAuthorizationRevoke = \"user.authorization.revoke\",\n    UserUpdate = \"user.update\"\n}\n\nexport enum SubscriptionStatus {\n    Enabled = \"enabled\",\n    WebhookCallbackVerificationPending = \"webhook_callback_verification_pending\",\n    WebhookCallbackVerificationFailed = \"webhook_callback_verification_failed\",\n    NotificationFailuresExceeded = \"notification_failures_exceeded\",\n    AuthorizationRevoked = \"authorization_revoked\",\n    ModeratorRemoved = \"moderator_removed\",\n    UserRemoved = \"user_removed\",\n    VersionRemoved = \"version_removed\",\n    WebsocketDisconnected = \"websocket_disconnected\",\n    WebsocketFailedPingPong = \"websocket_failed_ping_pong\",\n    WebsocketReceivedInboundTraffic = \"websocket_received_inbound_traffic\",\n    WebsocketConnectionUnused = \"websocket_connection_unused\",\n    WebsocketInternalError = \"websocket_internal_error\",\n    WebsocketNetworkTimeout = \"websocket_network_timeout\",\n    WebsocketNetworkError = \"websocket_network_error\"\n}\n\nexport enum StreamType {\n    Live = \"live\",\n    Playlist = \"playlist\",\n    WatchParty = \"watch_party\",\n    Premiere = \"premiere\",\n    Rerun = \"rerun\",\n    Error = \"\"\n}\n\nexport enum TransportMethod {\n    Webhook = \"webhook\",\n    Websocket = \"websocket\"\n}\n\nexport enum UserType {\n    Admin = \"admin\",\n    GlobalMod = \"global_mod\",\n    Staff = \"staff\",\n    Normal = \"\"\n}\n\nexport enum BroadcasterType {\n    Affiliate = \"affiliate\",\n    Partner = \"partner\",\n    Normal = \"\"\n}\n\nexport enum StreamFilterType {\n    All = \"all\",\n    Live = \"live\"\n}\n","class CustomError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n\nexport class FetchError extends CustomError {\n    constructor(response: Response) {\n        super(`${response.status}: ${response.statusText}`);\n    }\n}\n","import {\n    BroadcasterType,\n    StreamFilterType,\n    StreamType,\n    SubscriptionStatus,\n    SubscriptionType,\n    TransportMethod,\n    UserType\n} from \"./enums.js\";\nimport { FetchError } from \"./error.js\";\nimport { Awaitable } from \"./util.js\";\n\nexport const API_VERSION = \"1\";\nexport const HMAC_PREFIX = \"sha256=\";\nconst OAUTH_GRANT_TYPE = \"client_credentials\";\n\nexport const OAUTH_BASE_ENDPOINT = \"https://id.twitch.tv/oauth2\";\nconst OAUTH_TOKEN_ENDPOINT = OAUTH_BASE_ENDPOINT + \"/token\";\nconst OAUTH_REVOKE_ENDPOINT = OAUTH_BASE_ENDPOINT + \"/revoke\";\n\nexport const API_BASE_ENDPOINT = \"https://api.twitch.tv/helix\";\nconst GET_USERS_ENDPOINT = API_BASE_ENDPOINT + \"/users\";\nconst SUBSCRIPTION_ENDPOINT = API_BASE_ENDPOINT + \"/eventsub/subscriptions\";\nconst GET_CHANNELS_ENDPOINT = API_BASE_ENDPOINT + \"/channels\";\nconst GET_STREAMS_ENDPOINT = API_BASE_ENDPOINT + \"/streams\";\n\nasync function oauthRequest(url: string, body: any): Promise<Response> {\n    const query = new URLSearchParams(body);\n    const res = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: query.toString()\n    });\n    if (res.status === 200) {\n        return res;\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function getClientCredentials(clientId: string, clientSecret: string): Promise<ClientCredentialGrantResponse> {\n    const res = await oauthRequest(OAUTH_TOKEN_ENDPOINT, {\n        client_id: clientId,\n        client_secret: clientSecret,\n        grant_type: OAUTH_GRANT_TYPE\n    } satisfies ClientCredentialGrantQueryPairs);\n    return await res.json();\n}\n\nexport async function revokeClientCredentials(clientId: string, token: string): Promise<void> {\n    await oauthRequest(OAUTH_REVOKE_ENDPOINT, {\n        client_id: clientId,\n        token\n    } satisfies ClientCredentialRevokeQueryPairs);\n}\n\nexport async function authorize<T>(\n    clientId: string,\n    clientSecret: string,\n    fn: (accessToken: string) => Awaitable<T>\n): Promise<T> {\n    let result: T;\n    let error: any;\n    const { access_token } = await getClientCredentials(clientId, clientSecret);\n    try {\n        result = await fn(access_token);\n    }\n    catch (err) {\n        error = err;\n    }\n    finally {\n        await revokeClientCredentials(clientId, access_token);\n        if (error) {\n            throw error;\n        }\n        else {\n            return result!;\n        }\n    }\n}\n\nasync function authorizedRequest(\n    clientId: string,\n    accessToken: string,\n    url: string,\n    method: string,\n    options: AuthorizedSubscriptionRequestOptions\n): Promise<Response> {\n    const target = new URL(url);\n    const headers: HeadersInit = {\n        \"Client-Id\": clientId,\n        Authorization: `Bearer ${accessToken}`\n    };\n    let body: BodyInit | null = null;\n    if (options.body) {\n        headers[\"Content-Type\"] = \"application/json\";\n        body = JSON.stringify(options.body);\n    }\n    if (options.query) {\n        target.search = options.query.toString();\n    }\n    return await fetch(target, {\n        method,\n        headers,\n        body\n    });\n}\n\nexport async function getUsers(\n    clientId: string,\n    accessToken: string,\n    options: GetUsersOptions\n): Promise<GetResourceResponse<User>> {\n    const query = new URLSearchParams();\n    options.ids?.forEach(id => query.append(\"id\", id));\n    options.logins?.forEach(login => query.append(\"login\", login));\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        GET_USERS_ENDPOINT,\n        \"GET\",\n        { query }\n    );\n    if (res.status === 200) {\n        return await res.json();\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function getChannels(\n    clientId: string,\n    accessToken: string,\n    ids: Array<string>\n): Promise<GetResourceResponse<Channel>> {\n    const query = new URLSearchParams();\n    ids.forEach(id => query.append(\"broadcaster_id\", id));\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        GET_CHANNELS_ENDPOINT,\n        \"GET\",\n        { query }\n    );\n    if (res.status === 200) {\n        return await res.json();\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function getStreams(\n    clientId: string,\n    accessToken: string,\n    {\n        userIds,\n        userLogins,\n        gameIds,\n        ...nonIterOptions\n    }: GetStreamsOptions\n): Promise<GetStreamsResponse> {\n    const query = new URLSearchParams(<Record<string, string>>nonIterOptions);\n    userIds?.forEach(id => query.append(\"user_id\", id));\n    userLogins?.forEach(login => query.append(\"user_login\", login));\n    gameIds?.forEach(id => query.append(\"game_id\", id));\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        GET_STREAMS_ENDPOINT,\n        \"GET\",\n        { query }\n    );\n    if (res.status === 200) {\n        return await res.json();\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function subscribe(\n    clientId: string,\n    accessToken: string,\n    broadcasterId: string,\n    callbackEndpoint: string,\n    secret: string\n): Promise<CreateEventSubResponse> {\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        SUBSCRIPTION_ENDPOINT,\n        \"POST\",\n        {\n            body: {\n                type: SubscriptionType.StreamOnline,\n                version: API_VERSION,\n                condition: { broadcaster_user_id: broadcasterId },\n                transport: {\n                    method: TransportMethod.Webhook,\n                    callback: callbackEndpoint,\n                    secret: secret\n                }\n            } satisfies CreateStreamOnlineSubscriptionBody\n        }\n    );\n    if (res.status === 202) {\n        return await res.json();\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function getSubscriptions(\n    clientId: string,\n    accessToken: string,\n    options: GetSubscriptionsOptions = {}\n): Promise<GetEventSubsResponse> {\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        SUBSCRIPTION_ENDPOINT,\n        \"GET\",\n        { query: new URLSearchParams(options) }\n    );\n    if (res.status === 200) {\n        return await res.json();\n    }\n    else {\n        throw new FetchError(res);\n    }\n}\n\nexport async function deleteSubscription(\n    clientId: string,\n    accessToken: string,\n    subscriptionId: string\n): Promise<void> {\n    const res = await authorizedRequest(\n        clientId,\n        accessToken,\n        SUBSCRIPTION_ENDPOINT,\n        \"DELETE\",\n        { query: new URLSearchParams({ id: subscriptionId }) }\n    );\n    if (res.status !== 204) {\n        throw new FetchError(res);\n    }\n}\n\nexport type BroadcasterTargettedCondition = { broadcaster_user_id: string };\nexport type ChannelFollowCondition = BroadcasterTargettedCondition & { moderator_user_id: string };\nexport type ChannelRaidCondition = {\n    from_broadcaster_user_id?: string;\n    to_broadcaster_user_id?: string;\n};\nexport type ChannelPointsCustomSpecificRewardCondition = BroadcasterTargettedCondition & { reward_id?: string };\nexport type DropEntitlementGrantCondition = {\n    organization_id: string;\n    category_id?: string;\n    campaign_id?: string;\n};\nexport type ExtensionBitsTransactionCreateCondition = { extension_client_id: string };\nexport type UserAuthorizationCondition = { client_id: string };\nexport type UserUpdateCondition = { user_id: string };\nexport type Condition =\n    BroadcasterTargettedCondition |\n    ChannelFollowCondition |\n    ChannelRaidCondition |\n    ChannelPointsCustomSpecificRewardCondition |\n    DropEntitlementGrantCondition |\n    ExtensionBitsTransactionCreateCondition |\n    UserAuthorizationCondition |\n    UserUpdateCondition;\n\nexport interface BaseSubscription {\n    id: string;\n    type: `${SubscriptionType}`;\n    version: string;\n    status: `${SubscriptionStatus}`;\n    cost: number;\n    condition: object;\n    created_at: string;\n}\nexport interface ChannelUpdateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelUpdate}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelFollowSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelFollow}`;\n    condition: ChannelFollowCondition;\n}\nexport interface ChannelSubscribeSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelSubscribe}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelSubscriptionEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelSubscriptionEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelSubscriptionGiftSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelSubscriptionGift}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelSubscriptionMessageSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelSubscriptionMessage}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelCheerSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelCheer}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelRaidSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelRaid}`;\n    condition: ChannelRaidCondition;\n}\nexport interface ChannelBanSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelBan}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelUnbanSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelUnban}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelModeratorAddSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelModeratorAdd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelModeratorRemoveSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelModeratorRemove}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPointsCustomRewardAddSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPointsCustomRewardAdd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPointsCustomRewardUpdateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPointsCustomRewardUpdate}`;\n    condition: ChannelPointsCustomSpecificRewardCondition;\n}\nexport interface ChannelPointsCustomRewardRemoveSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPointsCustomRewardRemove}`;\n    condition: ChannelPointsCustomSpecificRewardCondition;\n}\nexport interface ChannelPointsCustomRewardRedemptionAddSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPointsCustomRewardRedemptionAdd}`;\n    condition: ChannelPointsCustomSpecificRewardCondition;\n}\nexport interface ChannelPointsCustomRewardRedemptionUpdateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPointsCustomRewardRedemptionUpdate}`;\n    condition: ChannelPointsCustomSpecificRewardCondition;\n}\nexport interface ChannelPollBeginSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPollBegin}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPollProgressSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPollProgress}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPollEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPollEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPredictionBeginSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPredictionBegin}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPredictionProgressSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPredictionProgress}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPredictionLockSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPredictionLock}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ChannelPredictionEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ChannelPredictionEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface CharityDonationSubscription extends BaseSubscription {\n    type: `${SubscriptionType.CharityDonation}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface CharityCampaignStartSubscription extends BaseSubscription {\n    type: `${SubscriptionType.CharityCampaignStart}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface CharityCampaignProgressSubscription extends BaseSubscription {\n    type: `${SubscriptionType.CharityCampaignProgress}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface CharityCampaignStopSubscription extends BaseSubscription {\n    type: `${SubscriptionType.CharityCampaignStop}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface DropEntitlementGrantSubscription extends BaseSubscription {\n    type: `${SubscriptionType.DropEntitlementGrant}`;\n    condition: DropEntitlementGrantCondition;\n}\nexport interface ExtensionBitsTransactionCreateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ExtensionBitsTransactionCreate}`;\n    condition: ExtensionBitsTransactionCreateCondition;\n}\nexport interface GoalBeginSubscription extends BaseSubscription {\n    type: `${SubscriptionType.GoalBegin}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface GoalProgressSubscription extends BaseSubscription {\n    type: `${SubscriptionType.GoalProgress}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface GoalEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.GoalEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface HypeTrainBeginSubscription extends BaseSubscription {\n    type: `${SubscriptionType.HypeTrainBegin}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface HypeTrainProgressSubscription extends BaseSubscription {\n    type: `${SubscriptionType.HypeTrainProgress}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface HypeTrainEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.HypeTrainEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ShieldModeBeginSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ShieldModeBegin}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ShieldModeEndSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ShieldModeEnd}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ShoutoutCreateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ShoutoutCreate}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface ShoutoutReceivedSubscription extends BaseSubscription {\n    type: `${SubscriptionType.ShoutoutReceived}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface StreamOnlineSubscription extends BaseSubscription {\n    type: `${SubscriptionType.StreamOnline}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface StreamOfflineSubscription extends BaseSubscription {\n    type: `${SubscriptionType.StreamOffline}`;\n    condition: BroadcasterTargettedCondition;\n}\nexport interface UserAuthorizationGrantSubscription extends BaseSubscription {\n    type: `${SubscriptionType.UserAuthorizationGrant}`;\n    condition: UserAuthorizationCondition;\n}\nexport interface UserAuthorizationRevokeSubscription extends BaseSubscription {\n    type: `${SubscriptionType.UserAuthorizationRevoke}`;\n    condition: UserAuthorizationCondition;\n}\nexport interface UserUpdateSubscription extends BaseSubscription {\n    type: `${SubscriptionType.UserUpdate}`;\n    condition: UserUpdateCondition;\n}\nexport type InvalidSubscription =\n    ChannelUpdateSubscription |\n    ChannelFollowSubscription |\n    ChannelSubscribeSubscription |\n    ChannelSubscriptionEndSubscription |\n    ChannelSubscriptionGiftSubscription |\n    ChannelSubscriptionMessageSubscription |\n    ChannelCheerSubscription |\n    ChannelRaidSubscription |\n    ChannelBanSubscription |\n    ChannelUnbanSubscription |\n    ChannelModeratorAddSubscription |\n    ChannelModeratorRemoveSubscription |\n    ChannelPointsCustomRewardAddSubscription |\n    ChannelPointsCustomRewardUpdateSubscription |\n    ChannelPointsCustomRewardRemoveSubscription |\n    ChannelPointsCustomRewardRedemptionAddSubscription |\n    ChannelPointsCustomRewardRedemptionUpdateSubscription |\n    ChannelPollBeginSubscription |\n    ChannelPollProgressSubscription |\n    ChannelPollEndSubscription |\n    ChannelPredictionBeginSubscription |\n    ChannelPredictionProgressSubscription |\n    ChannelPredictionLockSubscription |\n    ChannelPredictionEndSubscription |\n    CharityDonationSubscription |\n    CharityCampaignStartSubscription |\n    CharityCampaignProgressSubscription |\n    CharityCampaignStopSubscription |\n    DropEntitlementGrantSubscription |\n    ExtensionBitsTransactionCreateSubscription |\n    GoalBeginSubscription |\n    GoalProgressSubscription |\n    GoalEndSubscription |\n    HypeTrainBeginSubscription |\n    HypeTrainProgressSubscription |\n    HypeTrainEndSubscription |\n    ShieldModeBeginSubscription |\n    ShieldModeEndSubscription |\n    ShoutoutCreateSubscription |\n    ShoutoutReceivedSubscription |\n    StreamOfflineSubscription |\n    UserAuthorizationGrantSubscription |\n    UserAuthorizationRevokeSubscription |\n    UserUpdateSubscription;\nexport type Subscription = InvalidSubscription | StreamOnlineSubscription;\n\nexport type StreamOnlineEvent = {\n    id: string;\n    broadcaster_user_id: string;\n    broadcaster_user_login: string;\n    broadcaster_user_name: string;\n    type: `${Exclude<StreamType, StreamType.Error>}`;\n    started_at: string;\n};\n\ntype Cursor = string;\ntype ResponsePagination = { cursor?: Cursor };\ninterface PaginatedResponse {\n    pagination: ResponsePagination;\n}\n\nexport interface BaseWebhookBody {\n    subscription: Subscription;\n}\nexport interface InvalidSubscriptionWebhookBody extends BaseWebhookBody {\n    subscription: InvalidSubscription;\n}\nexport interface StreamOnlineWebhookBody extends BaseWebhookBody {\n    subscription: StreamOnlineSubscription;\n}\nexport interface StreamOnlineNotificationBody extends StreamOnlineWebhookBody {\n    event: StreamOnlineEvent;\n}\nexport interface StreamOnlineCallbackVerificationBody extends StreamOnlineWebhookBody {\n    challenge: string;\n}\nexport type StreamOnlineRevocationBody = StreamOnlineWebhookBody;\nexport type WebhookBody =\n    InvalidSubscriptionWebhookBody |\n    StreamOnlineNotificationBody |\n    StreamOnlineCallbackVerificationBody |\n    StreamOnlineRevocationBody;\n\ninterface CreateWebhookSubscriptionTransportOptions {\n    method: `${TransportMethod.Webhook}`;\n    callback: string;\n    secret: string;\n}\ninterface CreatedSubscriptionTransport {\n    method: `${TransportMethod}`;\n    callback?: string;\n    session_id?: string;\n    connected_at?: string;\n}\ninterface ListedSubscriptionTransport extends CreatedSubscriptionTransport {\n    disconnected_at?: string;\n}\ninterface BaseEventSubscription {\n    id: string;\n    status: `${SubscriptionStatus}`;\n    type: `${SubscriptionType}`;\n    version: typeof API_VERSION;\n    condition: Condition;\n    created_at: string;\n    transport: CreatedSubscriptionTransport;\n    cost: number;\n}\nexport interface ListedEventSubscription extends BaseEventSubscription {\n    transport: ListedSubscriptionTransport;\n}\ninterface BaseEventSubResponse {\n    total: number;\n    total_cost: number;\n    max_total_cost: number;\n}\nexport interface CreateEventSubResponse extends BaseEventSubResponse, GetResourceResponse<BaseEventSubscription> { };\nexport interface GetEventSubsResponse extends BaseEventSubResponse, PaginatedResponse, GetResourceResponse<ListedEventSubscription> { }\n\ntype AuthorizedSubscriptionRequestOptions = {\n    body?: any,\n    query?: string | URLSearchParams\n};\n\ntype CreateStreamOnlineSubscriptionBody = {\n    type: `${SubscriptionType.StreamOnline}`;\n    version: typeof API_VERSION;\n    condition: StreamOnlineSubscription[\"condition\"];\n    transport: CreateWebhookSubscriptionTransportOptions;\n};\n\nexport type GetSubscriptionsOptions = {\n    status?: `${SubscriptionStatus}`;\n    type?: `${SubscriptionType}`;\n    user_id?: string;\n    after?: Cursor;\n};\n\ntype ClientCredentialGrantQueryPairs = {\n    client_id: string;\n    client_secret: string;\n    grant_type: typeof OAUTH_GRANT_TYPE;\n};\n\nexport type ClientCredentialGrantResponse = {\n    access_token: string;\n    expires_in: number;\n    token_type: string;\n};\n\ntype ClientCredentialRevokeQueryPairs = {\n    client_id: string;\n    token: string;\n};\n\nexport type GetResourceResponse<Resource> = { data: Array<Resource> };\n\nexport type GetUsersOptions = {\n    ids?: Array<string>;\n    logins?: Array<string>;\n};\nexport type User = {\n    id: string;\n    login: string;\n    display_name: string;\n    type: `${UserType}`;\n    broadcaster_type: `${BroadcasterType}`;\n    description: string;\n    profile_image_url: string;\n    offline_image_url: string;\n    email?: string;\n    created_at: string;\n};\n\nexport type Channel = {\n    broadcaster_id: string;\n    broadcaster_login: string;\n    broadcaster_name: string;\n    broadcaster_language: string;\n    game_name: string;\n    game_id: string;\n    title: string;\n    delay: number;\n    tags: Array<string>;\n};\n\nexport type GetStreamsOptions = {\n    userIds?: Array<string>;\n    userLogins?: Array<string>;\n    gameIds?: Array<string>;\n    type?: `${StreamFilterType}`;\n    language?: string;\n    first?: number;\n    before?: string;\n    after?: string;\n};\nexport type Stream = {\n    id: string;\n    user_id: string;\n    user_login: string;\n    user_name: string;\n    game_id: string;\n    game_name: string;\n    type: `${Exclude<\n        StreamType,\n        StreamType.Playlist |\n        StreamType.Premiere |\n        StreamType.Rerun |\n        StreamType.WatchParty\n    >}`;\n    title: string;\n    tags: Array<string>;\n    viewer_count: number;\n    started_at: string;\n    language: string;\n    thumbnail_url: string;\n    is_mature: boolean;\n};\nexport type GetStreamsResponse = GetResourceResponse<Stream> & PaginatedResponse;\n","import { StreamOnlineWebhookBody, WebhookBody } from \"./api.js\";\nimport { SubscriptionType } from \"./enums.js\";\n\nexport function channelUrl(name: string): string {\n    return `https://www.twitch.tv/${name}`;\n}\n\nexport function isStreamOnlineBody(body: WebhookBody): body is StreamOnlineWebhookBody {\n    return body.subscription.type === SubscriptionType.StreamOnline;\n}\n\nexport type Awaitable<T> = T | Promise<T>;\n"],"mappings":"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","names":["RequestHeaders","NotificationType","SubscriptionType","SubscriptionStatus","StreamType","TransportMethod","UserType","BroadcasterType","StreamFilterType"]}